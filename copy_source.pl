#!/usr/bin/perl

use strict;
use warnings;

use File::Find;
use File::Path;
use File::Copy;
use File::Basename;
use Archive::Tar;

# This Perl script copies source codes and resources such as image files back
# and forth between the local project directory and the git repository.
# Currently this is just a quick-and-dirty approach and have only been tested
# within a test environment.
#
# Written by Naoki Mizuno

# TODO: Read config file
# TODO: Backup feature

my $PACKAGE_NAME = "com.me.myverilogTown";

# "foobar" if you have "foobar-android" or "foobar-desktop" directories
my $NAME = "verilogTown";
my @postpositions = ( "", "-desktop", "-android", "-html" );
my @subdirectories = qw( src assets res );
my @extensions = qw( java png );

my @files_to_copy;

# Check for validity of arguments
unless (@ARGV == 2) {
    print_help();
    exit;
}

my $from = shift;
my $to = shift;

# Die if source directory can't be found
die "Can't find source directory $from" unless -d $from;

foreach my $postposition (@postpositions) {
    foreach my $subdirectory (@subdirectories) {
        # e.g. verilogTown-android/src/com/me/myverilogTown
        my $dir_name = $NAME . $postposition . "/$subdirectory/";
        $dir_name .= $PACKAGE_NAME =~ s/\./\//gr if $subdirectory eq "src";

        next unless -d "$from/$dir_name";

        find(sub { add_files_to_copy($dir_name) }, "$from/$dir_name");
    }
}

copy_files();

sub add_files_to_copy {
    my $file_name = $_;
    my $dir_name = shift;

    # Return if the file name doesn't end with the extension
    return unless $file_name =~ m/\.@{[ join "|", @extensions ]}$/;

    # "Subtract" the "from" part
    # For example, if $File::Find::name is
    #   verilog_town/VERILOG_TOWN/verilogTown-html/src/com/me/myverilogTown/client/Foo.java
    # subtracting
    #   verilog_town/VERILOG_TOWN/
    # becomes
    #                             verilogTown-html/src/com/me/myverilogTown/client/Foo.java
    my $diff = $File::Find::name =~ s#$from##r;

    # Add to files that will be archived
    push @files_to_copy, $diff;
}

sub copy_files {
    for (my $i = 0; $i < scalar @files_to_copy; $i++) {
        # Note: Can't shift because this will be used later to create tar
        my $diff = $files_to_copy[$i];
        my $from_path = "$from/$diff";
        my $to_path = "$to/$diff";

        # Remove duplication of slashes
        trim_slashes(\$from_path);
        trim_slashes(\$to_path);

        # Create directory if it doesn't exist
        mkpath dirname $to_path unless -d dirname $to_path;

        if (copy $from_path, $to_path) {
            print "Copied $from_path\n\t=> $to_path\n";
        }
        else {
            die "Couldn't copy $from_path to $to_path: $!";
        }
    }
}

# Returns the file name for the tar file in the format of %Y%m%d%H%M%S.tar.gz
sub get_archive_file_name {
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();

    return sprintf "%4d%02d%02d%02d%02d%02d.tar.gz",
        1900 + $year, 1 + $mon, $mday, $hour, $min, $sec;
}

sub print_help {
    print <<EOF;
Usage: @{[basename $0]} [from dir] [to dir]
    The path can be either absolute or relative.
    Specify the the parent directory of the directories ending with
    "-desktop" or "-android" that were generated by the libgdx setup UI.
    For examlpe, for the following directory tree,

    ...
    |
    +-- VERILOG_TOWN
    |       |
    |       +-- verilogTown
    |       |   |
    |       |   +-- src
    |       |   +-- ...
    |       +-- verilogTown-desktop
    |       |
    |       +-- verilogTown-android
    |       +-- ...
    +-- ...

    "VERILOG_TOWN" must be the argument.
EOF
}
