#!/usr/bin/perl

# for non-destructive substitutions/foo/bar/r
use 5.014;
use strict;
use warnings;

use File::Find;
use File::Path;
use File::Copy;
use File::Copy::Recursive;
use File::Basename;
use Getopt::Long qw(:config no_ignore_case);

# This Perl script copies the source codes, resources such as image files, and
# the required libraries (jar files) downloaded and extracted by the libgdx
# setup UI to your local repository.
#
# Author: Naoki Mizuno

my $PACKAGE_NAME = "com.me.myverilogTown";

# "foobar" if you have "foobar-android" or "foobar-desktop" directories
my $NAME = "verilogTown";
my @postpositions = ( "", "-desktop", "-android", "-html" );
my @subdirectories = qw( src assets res libs );
my @extensions = qw( java png );

my @files_to_copy;
my $no_libs;
my $copy_source;
my $help;

# Parse options
GetOptions(
    "L|no-libs" => \$no_libs,
    "s|copy-source" => \$copy_source,
    "h|help" => \$help,
);

# Check for validity of arguments
if ($help or @ARGV < 2) {
    print_help();
    exit;
}

my $from = shift;
my $to = shift;

# Die if source directory can't be found
die "Can't find source directory $from" unless -d $from;

foreach my $postposition (@postpositions) {
    foreach my $subdirectory (@subdirectories) {
        # If libs are not to be copied
        next if $no_libs and $subdirectory eq "libs";
        # If sources need not copied
        next if not $copy_source and $subdirectory ne "libs";

        # e.g. verilogTown-android/assets/
        my $dir_name = $NAME . $postposition . "/$subdirectory/";
        # e.g. verilogTown-android/src/com/me/myverilogTown
        $dir_name .= $PACKAGE_NAME =~ s#\.#/#gr if $subdirectory eq "src";

        # Copy libs directory if libs are to be copied
        unless ($no_libs) {
            # HTML5 project have libs in different directory
            if ($postposition eq "-html") {
                $dir_name = $NAME . $postposition . "/war/WEB-INF/lib";
            }

            # Copy libs directory
            File::Copy::Recursive::dircopy "$from/$dir_name", "$to/$dir_name";

            # Copy .classpath file
            $dir_name = $NAME . $postposition;
            copy "$from/$dir_name/.classpath", "$to/$dir_name/.classpath" or die $!;

            print "Copied $from/$dir_name/.classpath\n";
        }

        # Copy source codes
        next unless -d "$from/$dir_name";
        find(sub { add_files_to_copy($dir_name) }, "$from/$dir_name");
    }
}

copy_files() if $copy_source;

sub add_files_to_copy {
    my $file_name = $_;
    my $dir_name = shift;

    # Return if the file name doesn't end with the extension
    return unless $file_name =~ m/\.@{[ join "|", @extensions ]}$/;

    # "Subtract" the "from" part
    # For example, if $File::Find::name is
    #   verilog_town/VERILOG_TOWN/verilogTown-html/src/com/me/myverilogTown/client/Foo.java
    # subtracting
    #   verilog_town/VERILOG_TOWN/
    # becomes
    #                             verilogTown-html/src/com/me/myverilogTown/client/Foo.java
    my $diff = $File::Find::name =~ s#$from##r;

    # Add to files that will be archived
    push @files_to_copy, $diff;
}

sub copy_files {
    foreach my $name (@files_to_copy) {
        my $from_path = "$from/$name";
        my $to_path = "$to/$name";

        # Remove duplicate of slashes
        trim_slashes(\$from_path);
        trim_slashes(\$to_path);

        # Create directory if it doesn't exist
        mkpath dirname $to_path unless -d dirname $to_path;

        if (copy $from_path, $to_path) {
            print "Copied $from_path\n\t=> $to_path\n";
        }
        else {
            die "Couldn't copy $from_path to $to_path: $!";
        }
    }
}

sub print_help {
    print <<EOF;
Usage: @{[basename $0]} [-L|--no-libs] [-s|--copy-source] FROM_DIR TO_DIR

    -L, --no-libs
            Only copies the libraries, excluding the source codes and resources.

    -s, --copy-source
            Copies source codes and resources such as images in addition to
            libraries. Add option -L to not copy libraries.
    --help
            Show this help.


    The path can be either absolute or relative.
    Specify the the parent directory of the directories ending with
    "-desktop" or "-android" that were generated by the libgdx setup UI.
    For example, for the following directory tree,

    ...
    |
    +-- VERILOG_TOWN
    |       |
    |       +-- verilogTown
    |       |   |
    |       |   +-- src
    |       |   +-- ...
    |       +-- verilogTown-desktop
    |       |
    |       +-- verilogTown-android
    |       +-- ...
    +-- ...

    "VERILOG_TOWN" must be the argument.
EOF
}

sub trim_slashes {
    my $path_ref = shift;
    $$path_ref =~ s#/+#/#g;
}
